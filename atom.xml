<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://quenkar.github.io</id>
    <title>quenkar</title>
    <updated>2021-01-05T11:01:21.036Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://quenkar.github.io"/>
    <link rel="self" href="https://quenkar.github.io/atom.xml"/>
    <subtitle>Don&apos;t say  &quot;lazy&quot;</subtitle>
    <logo>https://quenkar.github.io/images/avatar.png</logo>
    <icon>https://quenkar.github.io/favicon.ico</icon>
    <rights>All rights reserved 2021, quenkar</rights>
    <entry>
        <title type="html"><![CDATA[Vue常用命令]]></title>
        <id>https://quenkar.github.io/post/vue-chang-yong-ming-ling/</id>
        <link href="https://quenkar.github.io/post/vue-chang-yong-ming-ling/">
        </link>
        <updated>2021-01-04T12:42:12.000Z</updated>
        <content type="html"><![CDATA[<h2 id="淘宝镜像">淘宝镜像</h2>
<p><code>--registry=https://registry.npm.taobao.org</code></p>
<h2 id="vue-cli">vue-cli</h2>
<h3 id="下载vue-cli">下载vue-cli</h3>
<p><code>npm install -g vue-cli</code></p>
<h3 id="删除vue-cli"><strong>删除vue-cli</strong></h3>
<p><code>npm uninstall vue-cli -g</code></p>
<h2 id="vuecli">@vue/cli</h2>
<p><code>npm install -g @vue/cli</code></p>
<h2 id="安装相关组件">安装相关组件</h2>
<h3 id="vue-router">vue-router</h3>
<p><code>npm install vue-router</code></p>
<h3 id="vuex">vuex</h3>
<p><code>npm install vuex --save</code></p>
<h3 id="axios">axios</h3>
<p><code>npm install axios --save-dev</code></p>
<h3 id="element-ui">Element-ui</h3>
<p><code>npm i element-ui -S</code></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Maven静态资源加载问题]]></title>
        <id>https://quenkar.github.io/post/maven-jing-tai-zi-yuan-jia-zai-wen-ti/</id>
        <link href="https://quenkar.github.io/post/maven-jing-tai-zi-yuan-jia-zai-wen-ti/">
        </link>
        <updated>2020-10-30T04:49:05.000Z</updated>
        <content type="html"><![CDATA[<p><strong>使用Maven创建的JavaWeb项目时可能会遇到静态资源加载问题，解决方案如下：</strong></p>
<p>在<code>pom.xml</code>文件中加入如下代码</p>
<pre><code class="language-xml">&lt;build&gt;
    &lt;resources&gt;
        &lt;resource&gt;
            &lt;directory&gt;src/main/java&lt;/directory&gt;
            &lt;includes&gt;
                &lt;include&gt;**/*.properties&lt;/include&gt;
                &lt;include&gt;**/*.xml&lt;/include&gt;
            &lt;/includes&gt;
            &lt;filtering&gt;false&lt;/filtering&gt;
        &lt;/resource&gt;
        &lt;resource&gt;
            &lt;directory&gt;src/main/resources&lt;/directory&gt;
            &lt;includes&gt;
                &lt;include&gt;**/*.properties&lt;/include&gt;
                &lt;include&gt;**/*.xml&lt;/include&gt;
            &lt;/includes&gt;
            &lt;filtering&gt;false&lt;/filtering&gt;
        &lt;/resource&gt;
    &lt;/resources&gt;
&lt;/build&gt;
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[MySQL-TCL]]></title>
        <id>https://quenkar.github.io/post/mysql-tcl/</id>
        <link href="https://quenkar.github.io/post/mysql-tcl/">
        </link>
        <updated>2020-10-19T14:13:04.000Z</updated>
        <content type="html"><![CDATA[<h2 id="数据库事务">数据库事务</h2>
<h3 id="含义">含义</h3>
<p>​	通过一组逻辑操作单元（一组DML——sql语句），将数据从一种状态切换到另外一种状态</p>
<h3 id="特点">特点</h3>
<p>​	<code>ACID</code><br>
​	原子性(Atomicity)：要么都执行，要么都回滚<br>
​	一致性(consistency)：保证数据的状态操作前和操作后保持一致<br>
​	隔离性(isolation)：多个事务同时操作相同数据库的同一个数据时，一个事务的执行不受另外一个事务的干扰<br>
​	持久性(durability)：一个事务一旦提交，则数据将持久化到本地，除非其他事务对其进行修改</p>
<p>相关步骤：</p>
<pre><code>1、开启事务
2、编写事务的一组逻辑操作单元（多条sql语句）
3、提交事务或回滚事务
</code></pre>
<h3 id="事务的分类">事务的分类：</h3>
<p>隐式事务，没有明显的开启和结束事务的标志</p>
<pre><code class="language-sql">比如
insert、update、delete语句本身就是一个事务
</code></pre>
<p>显式事务，具有明显的开启和结束事务的标志</p>
<pre><code class="language-sql">1、开启事务
取消自动提交事务的功能

2、编写事务的一组逻辑操作单元（多条sql语句）
insert
update
delete

3、提交事务或回滚事务
</code></pre>
<h3 id="使用到的关键字">使用到的关键字</h3>
<pre><code class="language-sql">set autocommit=0;
start transaction;
commit;
rollback;

savepoint  断点
commit to 断点
rollback to 断点
</code></pre>
<h3 id="事务的隔离级别">事务的隔离级别:</h3>
<p>事务并发问题如何发生？</p>
<pre><code>当多个事务同时操作同一个数据库的相同数据时
</code></pre>
<p>事务的并发问题有哪些？</p>
<pre><code>脏读：一个事务读取到了另外一个事务未提交的数据
不可重复读：同一个事务中，多次读取到的数据不一致
幻读：一个事务读取数据时，另外一个事务进行更新，导致第一个事务读取到了没有更新的数据
</code></pre>
<p>如何避免事务的并发问题？</p>
<pre><code>通过设置事务的隔离级别
1、READ UNCOMMITTED
2、READ COMMITTED 可以避免脏读
3、REPEATABLE READ 可以避免脏读、不可重复读和一部分幻读
4、SERIALIZABLE可以避免脏读、不可重复读和幻读
</code></pre>
<p>设置隔离级别：</p>
<pre><code>set session|global  transaction isolation level 隔离级别名;
</code></pre>
<p>查看隔离级别：</p>
<pre><code>select @@tx_isolation;
</code></pre>
<h2 id="视图">视图</h2>
<p><strong>含义：理解成一张虚拟的表</strong></p>
<p>视图和表的区别：</p>
<pre><code>	            使用方式	占用物理空间

视图	完全相同	    不占用，仅仅保存的是sql逻辑

表	     完全相同	      占用
</code></pre>
<p>视图的好处：</p>
<pre><code>1、sql语句提高重用性，效率高
2、和表实现了分离，提高了安全性
</code></pre>
<h3 id="视图的创建">视图的创建</h3>
<pre><code class="language-sql">	语法：
CREATE VIEW  视图名
AS
查询语句;
</code></pre>
<h3 id="视图的增删改查">视图的增删改查</h3>
<p>​	1、查看视图的数据 ★<br>
​</p>
<pre><code class="language-sql">SELECT * FROM my_v4;
SELECT * FROM my_v1 WHERE last_name='Partners';

2、插入视图的数据
INSERT INTO my_v4(last_name,department_id) VALUES('虚竹',90);

3、修改视图的数据
UPDATE my_v4 SET last_name ='梦姑' WHERE last_name='虚竹';
</code></pre>
<p>​	4、删除视图的数据<br>
​	DELETE FROM my_v4;</p>
<h3 id="某些视图不能更新">某些视图不能更新</h3>
<p>​	包含以下关键字的sql语句：分组函数、distinct、group  by、having、union或者union all<br>
​	常量视图<br>
​	Select中包含子查询<br>
​	join<br>
​	from一个不能更新的视图<br>
​	where子句的子查询引用了from子句中的表</p>
<h3 id="视图逻辑的更新">视图逻辑的更新</h3>
<pre><code class="language-sql">#方式一：
CREATE OR REPLACE VIEW test_v7	--(个人觉得这个更好）
AS
SELECT last_name FROM employees
WHERE employee_id&gt;100;
	
#方式二:
ALTER VIEW test_v7
AS
SELECT employee_id FROM employees;
</code></pre>
<p>​</p>
<pre><code class="language-sql">SELECT * FROM test_v7;
</code></pre>
<h3 id="视图的删除">视图的删除</h3>
<p>​	<code>DROP VIEW test_v1,test_v2,test_v3;</code></p>
<h3 id="视图结构的查看">视图结构的查看</h3>
<p>​	<code>DESC test_v7;</code><br>
<code>​	SHOW CREATE VIEW test_v7;</code></p>
<h2 id="存储过程">存储过程</h2>
<p><strong>含义：一组经过预先编译的sql语句的集合</strong><br>
好处：</p>
<pre><code>1、提高了sql语句的重用性，减少了开发程序员的压力
2、提高了效率
3、减少了传输次数
</code></pre>
<h3 id="分类">分类：</h3>
<pre><code>1、无返回无参
2、仅仅带in类型，无返回有参
3、仅仅带out类型，有返回无参
4、既带in又带out，有返回有参
5、带inout，有返回有参
注意：in、out、inout都可以在一个存储过程中带多个
</code></pre>
<h3 id="创建存储过程">创建存储过程</h3>
<h4 id="语法">语法：</h4>
<pre><code class="language-sql">create procedure 存储过程名(in|out|inout 参数名  参数类型,...)
begin
	存储过程体

end
</code></pre>
<p>类似于方法：</p>
<pre><code class="language-sql">修饰符 返回类型 方法名(参数类型 参数名,...){

	方法体;
}
</code></pre>
<h3 id="注意">注意</h3>
<pre><code class="language-sql">1、需要设置新的结束标记
delimiter 新的结束标记
示例：
delimiter $

CREATE PROCEDURE 存储过程名(IN|OUT|INOUT 参数名  参数类型,...)
BEGIN
	sql语句1;
	sql语句2;

END $

2、存储过程体中可以有多条sql语句，如果仅仅一条sql语句，则可以省略begin end

3、参数前面的符号的意思
in:该参数只能作为输入 （该参数不能做返回值）
out：该参数只能作为输出（该参数只能做返回值）
inout：既能做输入又能做输出
</code></pre>
<h3 id="调用存储过程">调用存储过程</h3>
<p>​	<code>call 存储过程名(实参列表)</code></p>
<h2 id="函数">函数</h2>
<h3 id="创建函数">创建函数</h3>
<p>学过的函数：LENGTH、SUBSTR、CONCAT等</p>
<h3 id="语法-2">语法：</h3>
<pre><code>CREATE FUNCTION 函数名(参数名 参数类型,...) RETURNS 返回类型
BEGIN
	函数体

END
</code></pre>
<h3 id="调用函数">调用函数</h3>
<p>​	SELECT 函数名（实参列表）</p>
<h3 id="函数和存储过程的区别">函数和存储过程的区别</h3>
<pre><code class="language-sql">		关键字		调用语法	返回值			应用场景
函数		FUNCTION	SELECT 函数()	只能是一个		一般用于查询结果为一个值并返回时，当有返回值而且仅仅一个
存储过程	PROCEDURE	CALL 存储过程()	可以有0个或多个		一般用于更新
</code></pre>
<h2 id="流程控制结构">流程控制结构</h2>
<h3 id="系统变量">系统变量</h3>
<h4 id="一-全局变量">一、全局变量</h4>
<p>作用域：针对于所有会话（连接）有效，但不能跨重启</p>
<pre><code>查看所有全局变量
SHOW GLOBAL VARIABLES;
查看满足条件的部分系统变量
SHOW GLOBAL VARIABLES LIKE '%char%';
查看指定的系统变量的值
SELECT @@global.autocommit;
为某个系统变量赋值
SET @@global.autocommit=0;
SET GLOBAL autocommit=0;
</code></pre>
<h4 id="二-会话变量">二、会话变量</h4>
<p>作用域：针对于当前会话（连接）有效</p>
<pre><code>查看所有会话变量
SHOW SESSION VARIABLES;
查看满足条件的部分会话变量
SHOW SESSION VARIABLES LIKE '%char%';
查看指定的会话变量的值
SELECT @@autocommit;
SELECT @@session.tx_isolation;
为某个会话变量赋值
SET @@session.tx_isolation='read-uncommitted';
SET SESSION tx_isolation='read-committed';
</code></pre>
<h3 id="自定义变量">自定义变量</h3>
<h4 id="一-用户变量">一、用户变量</h4>
<p>声明并初始化：</p>
<pre><code class="language-sql">SET @变量名=值;
SET @变量名:=值;
SELECT @变量名:=值;
</code></pre>
<p>赋值：</p>
<pre><code class="language-sql">方式一：一般用于赋简单的值
SET 变量名=值;
SET 变量名:=值;
SELECT 变量名:=值;
</code></pre>
<pre><code class="language-sql">方式二：一般用于赋表 中的字段值
SELECT 字段名或表达式 INTO 变量
FROM 表;
</code></pre>
<p>使用：</p>
<pre><code class="language-sql">select @变量名;
</code></pre>
<h4 id="二-局部变量">二、局部变量</h4>
<p>声明：</p>
<pre><code class="language-sql">declare 变量名 类型 【default 值】;
</code></pre>
<p>赋值：</p>
<pre><code class="language-sql">方式一：一般用于赋简单的值
SET 变量名=值;
SET 变量名:=值;
SELECT 变量名:=值;
</code></pre>
<pre><code class="language-sql">方式二：一般用于赋表 中的字段值
SELECT 字段名或表达式 INTO 变量
FROM 表;
</code></pre>
<p>使用：</p>
<pre><code class="language-sql">select 变量名
</code></pre>
<h4 id="二者的区别">二者的区别：</h4>
<pre><code class="language-sql">		作用域			定义位置		语法
用户变量	当前会话		会话的任何地方		加@符号，不用指定类型
局部变量	定义它的BEGIN END中 	BEGIN END的第一句话	一般不用加@,需要指定类型
</code></pre>
<h3 id="分支">分支</h3>
<h4 id="一-if函数">一、if函数</h4>
<p>​	语法：if(条件，值1，值2)<br>
​	特点：<strong>可以用在任何位置</strong></p>
<pre><code class="language-sql">CREATE FUNCTION test_if(score INT) RETURNS CHAR
BEGIN
    IF score &gt;= 90 AND score &lt;= 100 THEN
        RETURN 'A';
    ELSEIF score &gt;= 80 THEN
        RETURN 'B';
    ELSE
        RETURN 'D';
    END IF;
END $
SELECT test_if(90) $
</code></pre>
<h4 id="二-case语句">二、case语句</h4>
<p>语法：</p>
<pre><code>情况一：类似于switch
case 表达式
when 值1 then 结果1或语句1(如果是语句，需要加分号) 
when 值2 then 结果2或语句2(如果是语句，需要加分号)
...
else 结果n或语句n(如果是语句，需要加分号)
end 【case】（如果是放在begin end中需要加上case，如果放在select后面不需要）

情况二：类似于多重if
case 
when 条件1 then 结果1或语句1(如果是语句，需要加分号) 
when 条件2 then 结果2或语句2(如果是语句，需要加分号)
...
else 结果n或语句n(如果是语句，需要加分号)
end 【case】（如果是放在begin end中需要加上case，如果放在select后面不需要）
</code></pre>
<p>特点：<br>
<strong>可以用在任何位置</strong></p>
<pre><code class="language-sql">CREATE PROCEDURE myp1(IN score INT)
BEGIN
    CASE
        WHEN score &gt;= 90 AND score &lt;= 100 THEN SELECT 'A';
        WHEN score &gt;= 80 THEN SELECT 'B';
        WHEN score &gt;= 60 THEN SELECT 'C';
        ELSE SELECT 'D';
        END CASE;
END $
</code></pre>
<h4 id="三-if-elseif语句">三、if elseif语句</h4>
<p>语法：</p>
<pre><code>if 情况1 then 语句1;
elseif 情况2 then 语句2;
...
else 语句n;
end if;
</code></pre>
<p>特点：<br>
<strong>只能用在begin end中！</strong></p>
<pre><code class="language-sql">CREATE FUNCTION test_if(score INT) RETURNS CHAR
BEGIN
    IF score &gt;= 90 AND score &lt;= 100 THEN
        RETURN 'A';
    ELSEIF score &gt;= 80 THEN
        RETURN 'B';
    ELSE
        RETURN 'D';
    END IF;
END $
SELECT test_if(90) $
</code></pre>
<h4 id="三者比较">三者比较：</h4>
<p>​			应用场合<br>
​	if函数		简单双分支<br>
​	case结构	等值判断 的多分支<br>
​	if结构		区间判断 的多分支</p>
<h4 id="四-循环">四、循环</h4>
<p>语法：</p>
<pre><code class="language-sql">【标签：】WHILE 循环条件  DO
	循环体
END WHILE 【标签】;
</code></pre>
<p>特点：</p>
<pre><code class="language-sql">只能放在BEGIN END里面

如果要搭配leave跳转语句，需要使用标签，否则可以不用标签

leave类似于java中的break语句，跳出所在循环！！！
</code></pre>
<pre><code class="language-sql">CREATE PROCEDURE pro_while1(IN insertCount INT)
BEGIN
    DECLARE i INT DEFAULT 1;
    WHILE i &lt;= insertCount
        DO
            INSERT INTO admin(username, `password`) VALUES (CONCAT('Rose', i), '666');
            SET i = i + 1;
        END WHILE;
END $

# 使用leave
CREATE PROCEDURE pro_while2(IN insertCount INT)
BEGIN
    DECLARE i INT DEFAULT 1;
    a:
    WHILE i &lt;= insertCount
        DO
            INSERT INTO admin(username, `password`) VALUES (CONCAT('xiaohu', i), '777');
            IF i &gt; 20 THEN
                LEAVE a;
            END IF; -- 这个条件不要忘了
            SET i = i + 1;
        END WHILE a;
END $
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[MySQL-DML]]></title>
        <id>https://quenkar.github.io/post/mysql-dml/</id>
        <link href="https://quenkar.github.io/post/mysql-dml/">
        </link>
        <updated>2020-10-18T11:00:07.000Z</updated>
        <content type="html"><![CDATA[<h2 id="dml语言">DML语言</h2>
<h3 id="插入">插入</h3>
<p>语法：<br>
<code>insert into 表名(字段名，...) values(值1，...);</code></p>
<pre><code class="language-sql">INSERT INTO author 
VALUES
  (1, '村上春树', '日本'),
  (2, '海明威', '美国'),
  (3, '鲁迅', '中国') ;
</code></pre>
<p>特点：</p>
<pre><code>1、字段类型和值类型一致或兼容，而且一一对应
2、可以为空的字段，可以不用插入值，或用null填充
3、不可以为空的字段，必须插入值
4、字段个数和值的个数必须一致
5、字段可以省略，但默认所有字段，并且顺序和表中的存储顺序一致
</code></pre>
<h3 id="修改">修改</h3>
<h4 id="修改单表语法">修改单表语法：</h4>
<pre><code>update 表名 set 字段=新值,字段=新值
【where 条件】
</code></pre>
<pre><code class="language-sql">UPDATE beauty
SET phone ='184321798'
WHERE NAME LIKE '%唐%';

UPDATE boys
SET boyName='张飞',userCP=321
WHERE id=2;
</code></pre>
<h4 id="修改多表语法">修改多表语法：</h4>
<pre><code>update 表1 别名1,表2 别名2
set 字段=新值，字段=新值
where 连接条件
and 筛选条件
</code></pre>
<pre><code class="language-sql">UPDATE 
  boys bo 
  INNER JOIN beauty b 
    ON bo.`id` = b.`boyfriend_id` SET b.`phone` = 1321 
WHERE bo.`boyName` = '张无忌' ;
</code></pre>
<h3 id="删除">删除</h3>
<h4 id="方式1delete语句">方式1：delete语句</h4>
<p>单表的删除： ★<br>
<code>delete from 表名 【where 筛选条件】</code></p>
<pre><code class="language-sql">DELETE 
FROM
  beauty 
WHERE phone LIKE '%9' ;
</code></pre>
<p>多表的删除：<br>
delete 别名1，别名2<br>
from 表1 别名1，表2 别名2<br>
where 连接条件<br>
and 筛选条件;</p>
<h4 id="方式2truncate语句">方式2：truncate语句</h4>
<p><code>truncate table 表名</code></p>
<pre><code class="language-sql">TRUNCATE TABLE boys ;
</code></pre>
<h4 id="两种方式的区别">两种方式的区别</h4>
<pre><code>#1.truncate不能加where条件，而delete可以加where条件

#2.truncate的效率高一丢丢

#3.truncate 删除带自增长的列的表后，如果再插入数据，数据从1开始
#delete 删除带自增长列的表后，如果再插入数据，数据从上一次的断点处开始

#4.truncate删除不能回滚，delete删除可以回滚
</code></pre>
<h2 id="ddl语句">DDL语句</h2>
<h3 id="库和表的管理">库和表的管理</h3>
<h4 id="库的管理">库的管理：</h4>
<pre><code class="language-sql">一、创建库
create database 库名
二、删除库
drop database 库名
</code></pre>
<h4 id="表的管理">表的管理：</h4>
<h5 id="创建表">创建表</h5>
<pre><code class="language-sql">CREATE TABLE IF NOT EXISTS stuinfo(
	stuId INT,
	stuName VARCHAR(20),
	gender CHAR,
	bornDate DATETIME);

DESC stuinfo;
</code></pre>
<h5 id="修改表-alter">修改表 alter</h5>
<p>语法：<code>ALTER TABLE 表名 ADD|MODIFY|DROP|CHANGE COLUMN 字段名 【字段类型】</code>;</p>
<pre><code class="language-sql">#修改字段名
ALTER TABLE studentinfo CHANGE COLUMN sex gender CHAR;

#修改表名
ALTER TABLE stuinfo RENAME [TO]  studentinfo;

#修改字段类型和列级约束
ALTER TABLE studentinfo MODIFY COLUMN borndate DATE ;

#添加字段
ALTER TABLE studentinfo ADD COLUMN email VARCHAR(20) first;

#删除字段
ALTER TABLE studentinfo DROP COLUMN email;

#更改库的字符集
ALTER DATABASE books CHARACTER SET gbk;
</code></pre>
<h5 id="删除表">删除表</h5>
<p><code>DROP TABLE [IF EXISTS] studentinfo;</code></p>
<h3 id="常见数据类型">常见数据类型</h3>
<pre><code class="language-txt">数值型：
   整型
   小数：
      定点数
      浮点数
字符型
   较短的文本：char,varchar
   较长的文本:text,blob（较长的二进制数据）
日期型
</code></pre>
<h4 id="整型">整型</h4>
<pre><code class="language-sql">分类：
   tinyint 1B
   smallint 2B
   mediumint 3B
   int 4B
   bigint 8B
</code></pre>
<h5 id="如何设置无符号和有符号">如何设置无符号和有符号</h5>
<pre><code class="language-sql">DROP TABLE IF EXISTS tab_int;
CREATE TABLE tab_int(
   t1 INT(7) ZEROFILL,# 设置了zerofill自动表示unsigned
   t2 INT(3) UNSIGNED
);

-- 设置长度，不设置会有默认长度，长度代表显示的默认宽度
</code></pre>
<h5 id="如果超出范围自动转为临界值并且报出警告out-of-range">如果超出范围自动转为临界值，并且报出警告out of range</h5>
<pre><code class="language-sql">INSERT INTO tab_int VALUES(43829439824328321,-321);
</code></pre>
<h4 id="小数">小数</h4>
<pre><code class="language-sql">浮点型：
   float(M,D)
   double(M,D)
定点型：
   DEC/DECMAL(M,D)（精确度要求较高的情况使用）

特点：
# 1 M:整数+小数位数
   D:小数点后的位数(四舍五入)
# 2 M和D可以省略
   如果是decimal，则M默认为10，D为0
   如果是float和double，则会根据插入的数值精度来决定精度
</code></pre>
<pre><code class="language-sql">CREATE TABLE tab_float(
   f1 FLOAT,
   f2 DOUBLE(5,2),
   f3 DEC(5,2)
);
INSERT INTO tab_float VALUES(123.456,123.45,123.45);
</code></pre>
<h4 id="字符型">字符型</h4>
<pre><code class="language-sql">较短的文本：
   char
   varchar
较长的文本：
   text：
   blob：（二进制）
其他：
   enum
   set
   
特点：
char(M)与varchar(M)
char代表固定长度的字符，varchar代表可变长度的字符。
varchar比较省空间，但是char效率比较高
char可以省略M（默认为1），varchar不行
</code></pre>
<h4 id="enum类型">enum类型</h4>
<pre><code class="language-sql">CREATE TABLE tab_char(
   c1 ENUM('a','b','c')
);

INSERT INTO  tab_char 
VALUES('a'),
('b'),
('M'),
('A');# 不区分大小写

SELECT * FROM tab_char;

#set 类型

CREATE TABLE tab_set(
   s1 SET('a','b','c')
);

INSERT INTO tab_set VALUES('a');
INSERT INTO tab_set VALUES('a,b');
INSERT INTO tab_set VALUES('a,b,c');

SELECT * FROM tab_set;
</code></pre>
<h4 id="日期型">日期型</h4>
<pre><code class="language-sql">/*
date：日期
time：时间
year：年
      
datetime 8字节  
timestamp 4字节
*/
CREATE TABLE tab_date(
   t1 DATETIME,
   t2 TIMESTAMP
);

INSERT INTO tab_date VALUES(NOW(),NOW());

SELECT * FROM tab_date;

set time_zone ='+9:00';
</code></pre>
<h3 id="常见约束">常见约束</h3>
<p><code>约束：一种限制，用于限制表中的数据，为了保证表中的数据的准确和可靠性</code></p>
<pre><code class="language-sql">分类：
	not null 非空约束
	default 默认，保证该字段有默认值
	primary key 主键，用于保证该字段的值具有唯一性，并且非空
	unique 唯一，用于保证该字段的值具有唯一性，可以为空
	check 检查约束（mysql中不支持）
	foreign key 外键，限制两个表的关系，用于保证该字段的值必须来自于主表的关联列的值
</code></pre>
<h4 id="列级约束">列级约束</h4>
<h5 id="语法">语法</h5>
<pre><code class="language-sql">create table 表名(
	字段名 字段类型 列级约束，
	字段名 字段类型 列级约束，
	字段名 字段类型 列级约束，
	表级约束
)
</code></pre>
<pre><code class="language-sql">CREATE DATABASE students;
USE students;

CREATE TABLE stuinfo(
	id INT PRIMARY KEY,
	stuName VARCHAR(20) NOT NULL,
	gender CHAR(1) CHECK (gender='男'||gender='女'),-- 无效
	seat INT UNIQUE,
	age INT DEFAULT 18,
	majorId INT REFERENCES major(id)
);
</code></pre>
<h4 id="表级约束">表级约束</h4>
<pre><code class="language-sql">CREATE TABLE stuinfo(
   id INT,
   stuName VARCHAR(20),
   gender CHAR(1),
   seat INT,
   age INT,
   majorId INT,
   
   CONSTRAINT pk PRIMARY KEY(id),
   CONSTRAINT uq UNIQUE(seat),
   CONSTRAINT ck CHECK(gender IN ('男','女')),-- 无效
   CONSTRAINT fk_stuinfo_major FOREIGN KEY(majorId) REFERENCES major(id)
);
</code></pre>
<h4 id="主键和唯一对比">主键和唯一对比</h4>
<pre><code class="language-sql">
primary key and unique

1.主键和唯一都保证唯一性

2.主键一定非空，唯一允许为空
   unique:保证无法重复插入null值，最多只能插入一个null值

3.是否允许组合 
primary key ，unique都允许组合
   primary key(id,stuname) 组合主键，需要两个字段完全一样才被视为一样
</code></pre>
<h4 id="添加列级约束">添加列级约束</h4>
<pre><code class="language-sql">ALTER TABLE stuinfo MODIFY COLUMN stuName VARCHAR(20) NOT NULL;

ALTER TABLE stuinfo MODIFY COLUMN age INT DEFAULT 18;

ALTER TABLE stuinfo MODIFY COLUMN id INT PRIMARY KEY;
</code></pre>
<h4 id="添加表级约束">添加表级约束</h4>
<pre><code class="language-sql">ALTER TABLE stuinfo ADD UNIQUE(seat);

ALTER TABLE stuinfo ADD FOREIGN KEY(majorId) REFERENCES major(id);
</code></pre>
<h4 id="删除约束">删除约束</h4>
<pre><code class="language-sql"># 1
ALTER TABLE stuinfo MODIFY COLUMN stuName VARCHAR(20);

ALTER TABLE stuinfo MODIFY COLUMN age INT;

# 2
ALTER TABLE stuinfo DROP INDEX seat;
</code></pre>
<h4 id="标识列">标识列</h4>
<p><code>AUTO_INCREMENT</code>，也称为自增长列</p>
<p>含义：可以不用手动插入值，系统提供默认的序列值</p>
<p>1.要求是一个key，一个表中只能最多有一个标识列</p>
<p>2.标识列的类型：<br>
<strong>只支持数值型</strong></p>
<pre><code class="language-sql">CREATE TABLE tab_identity(
	id INT PRIMARY KEY AUTO_INCREMENT,
	NAME VARCHAR(20)
);
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[进阶查询]]></title>
        <id>https://quenkar.github.io/post/jin-jie-cha-xun/</id>
        <link href="https://quenkar.github.io/post/jin-jie-cha-xun/">
        </link>
        <updated>2020-10-12T13:25:39.000Z</updated>
        <content type="html"><![CDATA[<h3 id="分组查询">分组查询</h3>
<p>语法：<br>
​	select 查询的字段，分组函数<br>
​	from 表<br>
​	group by 分组的字段</p>
<pre><code>特点：
1、可以按单个字段分组
2、和分组函数一同查询的字段最好是分组后的字段
3、分组筛选
		针对的表	位置			关键字
分组前筛选：	原始表		group by的前面		where
分组后筛选：	分组后的结果集	group by的后面		having

4、可以按多个字段分组，字段之间用逗号隔开
5、可以支持排序
6、having后可以支持别名
</code></pre>
<pre><code class="language-sql">SELECT 
  LENGTH(last_name) len_name,
  COUNT(*) cnt,
  department_id 
 FROM
  employees 
 GROUP BY len_name
 HAVING cnt &gt; 5 ;
</code></pre>
<pre><code class="language-sql">SELECT 
  AVG(salary),
  department_id,
  job_id 
 FROM
  employees 
 GROUP BY department_id,
  job_id ;
</code></pre>
<h3 id="多表连接查询">多表连接查询</h3>
<pre><code>笛卡尔乘积：如果连接条件省略或无效则会出现
解决办法：添加上连接条件
</code></pre>
<h4 id="传统模式下的连接-等值连接非等值连接">传统模式下的连接 ：等值连接——非等值连接</h4>
<pre><code>1.等值连接的结果 = 多个表的交集
2.n表连接，至少需要n-1个连接条件
3.多个表不分主次，没有顺序要求
4.一般为表起别名，提高阅读性和性能
</code></pre>
<h4 id="sql99语法通过join关键字实现连接">sql99语法：通过join关键字实现连接</h4>
<pre><code class="language-sql">含义：1999年推出的sql语法
支持：
等值连接、非等值连接 （内连接）
外连接
交叉连接

语法：

select 字段，...
from 表1
【inner|left outer|right outer|cross】join 表2 on  连接条件
【inner|left outer|right outer|cross】join 表3 on  连接条件
【where 筛选条件】
【group by 分组字段】
【having 分组后的筛选条件】
【order by 排序的字段或表达式】

好处：语句上，连接条件和筛选条件实现了分离，简洁明了！
</code></pre>
<h4 id="内连接">内连接</h4>
<pre><code class="language-sql">SELECT 
  last_name,
  department_name 
 FROM
  employees e 
  INNER JOIN departments d 
   ON e.`department_id` = d.`department_id` ;
</code></pre>
<p>三表连接：</p>
<pre><code class="language-sql">SELECT 
  last_name,
  department_name,
  job_title 
 FROM
  employees e 
  INNER JOIN departments d
  ON d.`department_id` = e.`department_id` 
  INNER JOIN jobs j 
   ON e.`job_id` = j.`job_id` 
 ORDER BY department_name DESC ;
</code></pre>
<h4 id="外连接">外连接</h4>
<p><strong>用于一个表中有，一个表中没有的情况</strong></p>
<ol>
<li></li>
</ol>
<p>外连接的查询结果为主表中的所有记录</p>
<p>如果从表中有和它匹配的，就显示匹配的值</p>
<p>如果从表中没有匹配的，就显示null</p>
<ol start="2">
<li></li>
</ol>
<p>左外连接：left join左边的是主表</p>
<p>右外连接：right join右边的是主表</p>
<pre><code class="language-sql"># 左外连接
 SELECT 
  b.name
 FROM
  beauty b 
  LEFT OUTER JOIN boys bo 
   ON b.`boyfriend_id` = bo.`id` 
 WHERE bo.`id` IS NULL ;
 # 右外连接
 SELECT 
  b.name 
 FROM
  boys bo 
  RIGHT OUTER JOIN beauty b 
   ON b.`boyfriend_id` = bo.`id` 
 WHERE bo.`id` IS NULL ;
# 交叉连接-&gt;笛卡尔乘积
SELECT 
  b.*,
  bo.* 
FROM
  beauty b 
  CROSS JOIN boys bo ;
</code></pre>
<h4 id="自连接">自连接</h4>
<p>案例：查询员工名和直接上级的名称</p>
<p>sql99</p>
<pre><code class="language-sql">SELECT e.last_name,m.last_name
FROM employees e
JOIN employees m ON e.`manager_id`=m.`employee_id`;
</code></pre>
<p>sql92</p>
<pre><code class="language-sql">SELECT e.last_name,m.last_name
FROM employees e,employees m 
WHERE e.`manager_id`=m.`employee_id`;
</code></pre>
<h3 id="子查询">子查询</h3>
<p>含义：</p>
<pre><code>一条查询语句中又嵌套了另一条完整的select语句，其中被嵌套的select语句，称为子查询或内查询
在外面的查询语句，称为主查询或外查询
</code></pre>
<p>特点：</p>
<pre><code>1、子查询都放在小括号内
2、子查询可以放在from后面、select后面、where后面、having后面，但一般放在条件的右侧
3、子查询优先于主查询执行，主查询使用了子查询的执行结果
4、子查询根据查询结果的行数不同分为以下两类：
① 单行子查询
	结果集只有一行
	一般搭配单行操作符使用：&gt; &lt; = &lt;&gt; &gt;= &lt;= 
	非法使用子查询的情况：
	a、子查询的结果为一组值
	b、子查询的结果为空
	
② 多行子查询
	结果集有多行
	一般搭配多行操作符使用：any、all、in、not in
	in： 属于子查询结果中的任意一个就行
	any和all往往可以用其他查询代替
</code></pre>
<h4 id="放在where或having后面"># 放在where或having后面</h4>
<h5 id="标量子查询"># 标量子查询</h5>
<pre><code class="language-sql"> # eg.1
 SELECT 
  * 
 FROM
  employees 
 WHERE salary &gt; 
  (SELECT 
   salary 
  FROM
   employees 
  WHERE last_name = 'Abel');
  
 # eg.2
 SELECT 
  last_name,
  job_id,
  salary 
 FROM
  employees 
 WHERE job_id = 
  (SELECT 
   job_id 
  FROM
   employees 
  WHERE employee_id = 141) 
  AND salary &gt; 
  (SELECT 
   salary 
  FROM
   employees 
  WHERE employee_id = 143) ;

 # eg.3
 SELECT 
  last_name,
  job_id,
  salary 
 FROM
  employees 
 WHERE salary = 
  (SELECT 
   MIN(salary) 
  FROM
   employees) ;

 #eg.4

 SELECT 
  department_id,
  MIN(salary) 
 FROM
  employees 
 GROUP BY department_id 
 HAVING MIN(salary) &gt; 
  (SELECT 
   MIN(salary) 
  FROM
   employees 
  WHERE department_id = 50) ;
</code></pre>
<p><strong># 非法使用标量子查询的情况</strong><br>
<strong># 注意子查询的结果是不是一行一列</strong></p>
<h5 id="列子查询"># 列子查询</h5>
<p><strong>多行操作符</strong><br>
<strong>in/not in</strong><br>
<strong>any/some</strong><br>
<strong>all</strong></p>
<pre><code class="language-sql"> # eg.1 in
 SELECT 
  last_name 
 FROM
  employees 
 WHERE department_id IN 
  (SELECT DISTINCT 
   department_id 
  FROM
   departments 
  WHERE location_id IN (1400, 1700)) ;

 # eg.2 any

 SELECT 
  employee_id,
  last_name,
  job_id,
  salary 
 FROM
  employees 
 WHERE salary &lt; ANY 
  (SELECT DISTINCT 
   salary 
  FROM
   employees 
  WHERE job_id = 'IT_PROG') 
  AND job_id &lt;&gt; 'IT_PROG' ;
 # 与上面等价
 SELECT 
  employee_id,
  last_name,
  job_id,
  salary 
 FROM
  employees 
 WHERE salary &lt; 
  (SELECT DISTINCT 
   MAX(salary) 
  FROM
   employees 
  WHERE job_id = 'IT_PROG') 
  AND job_id &lt;&gt; 'IT_PROG' ;
  
 # eg.3 all
 SELECT 
  employee_id,
  last_name,
  job_id,
  salary 
 FROM
  employees 
 WHERE salary &lt; ALL 
  (SELECT DISTINCT 
   salary 
  FROM
   employees 
  WHERE job_id = 'IT_PROG') 
  AND job_id &lt;&gt; 'IT_PROG' ;
</code></pre>
<h5 id="行子查询"># 行子查询</h5>
<p># 将多个字段当成一个字段使用</p>
<pre><code class="language-sql"> SELECT 
  * 
 FROM
  employees 
 WHERE (employee_id, salary) = 
  (SELECT 
   MIN(employee_id),
   MAX(salary) 
  FROM
   employees) ;
</code></pre>
<p># 放在select后面<br>
# eg.1</p>
<pre><code class="language-sql"> # wrong 没法查出来员工数量为0的部门
 SELECT 
  COUNT(*),
  department_id 
 FROM
  employees 
 GROUP BY department_id ;

 SELECT 
  d.* ,
  (SELECT 
   COUNT(*) 
  FROM
   employees e 
  WHERE e.department_id = d.`department_id`) COUNT
 FROM
  departments d ;
</code></pre>
<h5 id="放在from后面"># 放在from后面</h5>
<p><strong># 将子查询结果充当一张表，必须起别名</strong></p>
<pre><code class="language-sql"> # eg.1
 SELECT 
  * 
 FROM
  (SELECT 
   AVG(salary) ag,
   department_id 
  FROM
   employees 
  GROUP BY department_id) ag_dep 
  INNER JOIN job_grades g 
   ON ag_dep.ag BETWEEN lowest_sal 
   AND highest_sal ;
</code></pre>
<h5 id="放在exists后面相关子查询"># 放在exists后面（相关子查询）</h5>
<pre><code class="language-sql"> 语法：
   exists（查询语句）
 结果： 
   0或1
</code></pre>
<pre><code class="language-sql">SELECT 
  EXISTS 
  (SELECT 
   employee_id 
  FROM
   employees 
  WHERE salary = 30300) AS result ;

 SELECT 
  department_name 
 FROM
  departments d 
 WHERE EXISTS 
  (SELECT 
   * 
  FROM
   employees e 
  WHERE e.department_id = d.department_id) ;
</code></pre>
<h3 id="分页查询">分页查询</h3>
<p>应用场景：</p>
<p><code>实际的web项目中需要根据用户的需求提交对应的分页查询的sql语句</code></p>
<p>语法：</p>
<pre><code>select 字段|表达式,...
from 表
【where 条件】
【group by 分组字段】
【having 条件】
【order by 排序的字段】
limit 【起始的条目索引，】条目数;
</code></pre>
<p>特点：</p>
<pre><code>1.起始条目索引从0开始

2.limit子句放在查询语句的最后

3.公式：select * from  表 limit （page-1）*sizePerPage,sizePerPage
假如:
每页显示条目数sizePerPage
要显示的页数 page
</code></pre>
<pre><code class="language-sql"># 1.查询前五条员工信息
SELECT 
  * 
FROM
  employees 
LIMIT 0, 5 ;
# 或者
SELECT 
  * 
FROM
  employees 
LIMIT 5 ;
</code></pre>
<h4 id="经典子查询案例"># 经典子查询案例</h4>
<pre><code class="language-sql">#1.查询工资最低的员工信息:last_name,salarye
SELECT 
  last_name,
  salary 
FROM
  employees 
WHERE salary = 
  (SELECT 
    MIN(salary) 
  FROM
    employees) ;

#2.查询平均工资最低的部门信息
#麻烦写法
SELECT 
  * 
FROM
  departments 
WHERE department_id = 
  (SELECT 
    department_id 
  FROM
    employees 
  GROUP BY department_id 
  HAVING AVG(salary) = 
    (SELECT 
      MIN(ag) 
    FROM
      (SELECT 
        AVG(salary) ag,
        department_id 
      FROM
        employees 
      GROUP BY department_id) t)) ;
# 简易写法
SELECT 
  * 
FROM
  departments 
WHERE department_id = 
  (SELECT 
    department_id 
  FROM
    employees 
  GROUP BY department_id 
  ORDER BY AVG(salary) 
  LIMIT 1) ;
</code></pre>
<h3 id="联合查询">联合查询</h3>
<p>引入：<br>
union 联合、合并</p>
<p>语法：</p>
<pre><code>select 字段|常量|表达式|函数 【from 表】 【where 条件】 union 【all】
select 字段|常量|表达式|函数 【from 表】 【where 条件】 union 【all】
select 字段|常量|表达式|函数 【from 表】 【where 条件】 union  【all】
.....
select 字段|常量|表达式|函数 【from 表】 【where 条件】
</code></pre>
<p>特点：</p>
<pre><code>1、多条查询语句的查询的列数必须是一致的
2、多条查询语句的查询的列的类型几乎相同
3、union代表去重，union all代表不去重
</code></pre>
<pre><code class="language-sql"># 查询部门编号&gt;90或者邮箱包含a的员工信息
SELECT 
  * 
FROM
  employees 
WHERE department_id &gt; 90 || email LIKE '%a%' ;

SELECT 
  * 
FROM
  employees 
WHERE email LIKE '%a%' 
UNION
SELECT 
  * 
FROM
  employees 
WHERE department_id &gt; 90 ;
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Maven配置]]></title>
        <id>https://quenkar.github.io/post/maven-pei-zhi/</id>
        <link href="https://quenkar.github.io/post/maven-pei-zhi/">
        </link>
        <updated>2020-10-11T12:14:39.000Z</updated>
        <content type="html"><![CDATA[<h2 id="安装maven">安装Maven</h2>
<h3 id="下载">下载</h3>
<p>http://maven.apache.org/</p>
<h3 id="配置环境变量">配置环境变量</h3>
<p>以我的计算机为例：</p>
<p><code>MAVEN_HOME D:\apache-maven-3.6.3 path</code> <code>%MAVEN_HOME%\bin</code></p>
<h3 id="查看-maven-版本信息验证安装是否正确">查看 Maven 版本信息验证安装是否正确</h3>
<p><code>mvn -v</code></p>
<figure data-type="image" tabindex="1"><img src="https://quenkar.github.io/post-images/1602418609000.png" alt="" loading="lazy"></figure>
<h2 id="配置本地仓库和阿里云镜像">配置本地仓库和阿里云镜像</h2>
<h3 id="配置本地仓库">配置本地仓库</h3>
<p>Maven 的核心程序并不包含具体功能，仅负责宏观调度。具体功能由插 件来完成。Maven 核心程序会到本地仓库中查找插件。如果本地仓库中 没有就会从远程中央仓库下载。此时如果不能上网则无法执行 Maven 的 具体功能。为了解决这个问题，我们可以将 Maven 的本地仓库指向一个 在联网情况下下载好的目录。</p>
<p>Maven 默认的本地仓库：</p>
<p>~.m2\repository 目录</p>
<h3 id="找到-maven-的核心配置文件-settingsxml">找到 Maven 的核心配置文件 settings.xml</h3>
<p>文件： 解压目录 D:\apache-maven-3.6.3\conf\settings.xml</p>
<p>设置方式 本地仓库的路径 E:\LocalRepository</p>
<figure data-type="image" tabindex="2"><img src="https://quenkar.github.io/post-images/1602418620472.png" alt="" loading="lazy"></figure>
<h2 id="配置阿里云镜像">配置阿里云镜像</h2>
<pre><code class="language-xml">&lt;mirrors&gt;
 &lt;mirror&gt;

   &lt;id&gt;alimaven&lt;/id&gt;

   &lt;name&gt;aliyun maven&lt;/name&gt;

   &lt;url&gt;http://maven.aliyun.com/nexus/content/groups/public/&lt;/url&gt;

   &lt;mirrorOf&gt;central&lt;/mirrorOf&gt;    

  &lt;/mirror&gt;
&lt;/mirrors&gt;
</code></pre>
<h2 id="在-idea-中使用-maven">在 Idea 中使用 Maven</h2>
<p><code>Settings-&gt;Build,Execution,Deployment-&gt;Build Tools-&gt;Maven</code></p>
<figure data-type="image" tabindex="3"><img src="https://quenkar.github.io/post-images/1602418626351.png" alt="" loading="lazy"></figure>
<p>将前面配置过的setting.xml覆盖原来的，再自己选择一个仓库，或者使用默认C盘下的仓库</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[MySQL-常见函数]]></title>
        <id>https://quenkar.github.io/post/mysql-chang-jian-han-shu/</id>
        <link href="https://quenkar.github.io/post/mysql-chang-jian-han-shu/">
        </link>
        <updated>2020-10-08T10:50:50.000Z</updated>
        <content type="html"><![CDATA[<h2 id="字符函数">字符函数</h2>
<h3 id="length"># length</h3>
<p>SELECT LENGTH('张三');	#utf8汉字占三个字节</p>
<p>-&gt;<code>6</code></p>
<h3 id="concat"># concat</h3>
<pre><code class="language-sql"> SELECT 
  CONCAT(last_name, '_', first_name) 
 FROM
  employees ;
 # lower,upper
 SELECT 
  CONCAT(
   LOWER(last_name),
   '_',
   UPPER(first_name)
  ) 
 FROM
  employees ;
</code></pre>
<h3 id="substrsubstring"># substr,substring</h3>
<p># <strong>！！！important</strong>：<strong>sql索引下标从1开始</strong></p>
<pre><code class="language-sql"> SELECT SUBSTR('李莫愁爱上了陆湛远',7) output;
 SELECT SUBSTR('李莫愁爱上了陆湛远',1,3) output;

 SELECT 
  CONCAT(
   UPPER(SUBSTR(last_name, 1, 1)),
   '_',
   LOWER(SUBSTR(last_name, 2))
  ) AS output 
 FROM
  employees 
 ORDER BY output ; 
</code></pre>
<h3 id="instr"># instr</h3>
<p>返回字串第一次在主串的下不标，<strong>找不到返回0</strong></p>
<pre><code class="language-sql"> SELECT 
  INSTR(
   '杨不悔爱上了殷刘侠',
   '殷刘侠'
  ) AS output ;
</code></pre>
<h3 id="trim"># trim</h3>
<p><code>SELECT LENGTH(TRIM(' abc ')) AS output;</code>-&gt;<code>abc</code></p>
<p><code>SELECT TRIM('a' FROM 'aaaaaaa张aaa翠aaa三aaaaaaa') output;</code>-&gt;<code>张aaa翠aaa三</code></p>
<h3 id="lpad"># lpad</h3>
<p>用指定的字符左填充<br>
<code>SELECT LPAD('fdsfds',10,'*') output;</code></p>
<h3 id="rpad"># rpad</h3>
<p><code>SELECT RPAD('fdsfds',10,'&amp;') output;</code></p>
<h3 id="replace"># replace</h3>
<p><code>SELECT REPLACE('张无忌爱上了周芷若','周芷若','张敏') output;</code></p>
<h2 id="数学函数">数学函数</h2>
<h3 id="round"># round</h3>
<p>四舍五入<br>
<code>SELECT ROUND(1.48);</code>-&gt;2<br>
<code>SELECT ROUND(-1.75);</code>-&gt;-2<br>
<code>SELECT ROUND(1.895,2);</code> -&gt;1.90</p>
<h3 id="rand">#  rand</h3>
<p><code>select rand()*10;</code>-&gt;<code>返回[0,10)随机值</code></p>
<h3 id="ceil"># ceil</h3>
<p>向上取整<br>
<code>SELECT CEIL(1.07);</code></p>
<h3 id="floor"># floor</h3>
<p>向下取整<br>
<code>SELECT FLOOR(-2.02);</code></p>
<h3 id="truncate"># truncate</h3>
<p>截断<br>
<code>SELECT TRUNCATE(1.654382194,2);</code></p>
<h3 id="mod"># mod</h3>
<p>取余 mod(a,b) == <strong>a-a/b*b;</strong><br>
<code>SELECT MOD(10, - 3) ;</code></p>
<h2 id="日期函数">日期函数</h2>
<h3 id="now">#now</h3>
<p><code>SELECT NOW() ;</code></p>
<h3 id="curdate">#curdate</h3>
<p><code>SELECT CURDATE() ;</code></p>
<h3 id="curtime">#curtime</h3>
<pre><code class="language-sql">SELECT 
  CURTIME() ;


 SELECT 
  YEAR(NOW()) ;

 SELECT 
  MONTH(NOW()) ;

 SELECT 
  DAY(NOW()) ;

 SELECT 
  HOUR(NOW()) ;
 SELECT 
  MINUTE(NOW()) ;
 SELECT 
  SECOND(NOW()) ;
</code></pre>
<h3 id="str_to_date"># str_to_date</h3>
<pre><code class="language-sql"> SELECT STR_TO_DATE('2010-10-3','%Y-%c-%d');

 SELECT 
  * 
 FROM
  employees 
 WHERE hiredate = '1992-4-3' ;
</code></pre>
<h3 id="date_format"># date_format</h3>
<p><code>SELECT DATE_FORMAT(NOW(),'%Y-%m-%d:%H-%i-%s');</code></p>
<h2 id="其他函数">其他函数</h2>
<p>SELECT VERSION();</p>
<p>SELECT DATABASE();</p>
<p>SELECT USER();</p>
<h3 id="if函数"># if函数</h3>
<pre><code class="language-sql"> SELECT 
  IF(10 &gt; 5, 'true', 'false') ;

 SELECT 
  last_name,
  commission_pct,
  IF(
   commission_pct IS NULL,
   '没奖金',
   '有奖'
  ) output 
 FROM
  employees ;
</code></pre>
<h3 id="case函数"># case函数</h3>
<p>语法：<br>
case: 判断的字段或者表达式<br>
when 常量1 then 要显示的值或者语句<br>
when 常量2 then 要显示的值或者语句<br>
else 要显示的值或者语句<br>
end</p>
<pre><code class="language-sql"> SELECT salary,department_id,
 CASE department_id
 WHEN 30 THEN salary*1.1
 WHEN 40 THEN salary*1.2
 WHEN 50 THEN salary*1.3
 ELSE salary
 END AS 新工资
 FROM employees;
</code></pre>
<h4 id="2-类似于多重ifelse"># 2 类似于多重if……else</h4>
<p>case<br>
when 条件1 then 要显示的值或者语句<br>
when 条件2 then 要显示的值或者语句<br>
else 要显示的值或者语句<br>
end</p>
<pre><code class="language-sql"> SELECT 
  salary,
  CASE
   WHEN salary &gt; 20000 
   THEN 'A' 
   WHEN salary &gt; 15000 
   THEN 'B' 
   WHEN salary &gt; 10000 
   THEN 'C' 
   ELSE 'D' 
  END AS 工资级别 
 FROM
  employees ;
</code></pre>
<h2 id="分组函数">分组函数</h2>
<h3 id="sum"># sum</h3>
<p>求和</p>
<h3 id="max"># max</h3>
<p>最大值</p>
<h3 id="min"># min</h3>
<p>最小值</p>
<h3 id="avg"># avg</h3>
<p>平均值</p>
<h3 id="count"># count</h3>
<p>计数</p>
<p>特点：<br>
1、以上五个分组函数都忽略null值，除了count(<em>)<br>
2、sum和avg一般用于处理数值型<br>
max、min、count可以处理任何数据类型<br>
3、都可以搭配distinct使用，用于统计去重后的结果<br>
4、count的参数可以支持：<br>
字段、</em>、常量值（一般放1），<strong>建议使用 count(*)</strong></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[MySQL-查询 ]]></title>
        <id>https://quenkar.github.io/post/mysql-cha-xun/</id>
        <link href="https://quenkar.github.io/post/mysql-cha-xun/">
        </link>
        <updated>2020-10-04T14:04:01.000Z</updated>
        <content type="html"><![CDATA[<h2 id="mysql-条件查询">MySQL-条件查询</h2>
<h4 id="importantwhere">Important：where</h4>
<p><strong>语法：</strong><br>
select<br>
查询列表<br>
from<br>
表名<br>
where<br>
条件<br>
<strong>分类：</strong><br>
1.按条件表达式<br>
条件运算符： <strong>&gt; &lt; = != &gt;= &lt;=</strong></p>
<p>2.逻辑表达式<br>
逻辑运算符：<br>
<strong>&amp;&amp; || !</strong><br>
<strong>and or not</strong><br>
3.模糊查询：<br>
- <strong>like</strong><br>
- <strong>between and</strong><br>
- <strong>in</strong><br>
- <strong>is null</strong></p>
<h4 id="按条件表达式"># 按条件表达式</h4>
<p><code>SELECT * FROM employees WHERE salary&gt;12000;</code></p>
<pre><code class="language-sql"> SELECT 
  last_name,
  department_id 
 FROM
  employees 
 WHERE department_id != 90 ;
</code></pre>
<h4 id="按逻辑表达式"># 按逻辑表达式</h4>
<pre><code class="language-sql"> SELECT 
  last_name,
  salary,
  commission_pct 
 FROM
  employees 
 WHERE salary &gt;= 10000 
  AND salary &lt;= 20000 ;

 SELECT 
  * 
 FROM
  employees 
 WHERE department_id &lt; 90 || department_id &gt; 110 || salary &gt; 15000 ;
</code></pre>
<h4 id="模糊查询"># 模糊查询</h4>
<h5 id="like">like</h5>
<p>一般和通配符使用<br>
<strong>%任意多个字符</strong><br>
<strong>_任意单个字符</strong></p>
<pre><code class="language-sql"> SELECT 
  * 
 FROM
  employees 
 WHERE last_name LIKE '%a%' ;

 SELECT 
  * 
 FROM
  employees 
 WHERE last_name LIKE '__n_l%' ;
 # 假如要搜索的字段中包含_或者%时,用转义字符 \
 SELECT * FROM employees WHERE last_name LIKE '_\_%';
 # 自定义转义字符
 SELECT * FROM employees WHERE last_name LIKE '_$_%' ESCAPE '$';
</code></pre>
<h5 id="between-and">between and</h5>
<pre><code class="language-sql"> SELECT 
  * 
 FROM
  employees 
 WHERE employee_id BETWEEN 100 AND 120 ;
</code></pre>
<p><strong># 包含临界值的，相当于 [100,120]</strong></p>
<h5 id="in">in</h5>
<p><strong>值类型要一直或者能相互转化,不支持使用通配符</strong></p>
<pre><code class="language-sql">SELECT 
  * 
 FROM
  employees 
 WHERE job_id IN (
   'AD_PRES',
   'IT_PROG',
   'IT_PROG',
   'FI_ACCOUNT'
  );
</code></pre>
<h5 id="is-null">is null</h5>
<p><strong>用is判断null，而不能直接用 = null这种写法，=与!=不能判断null值</strong></p>
<pre><code class="language-sql"> SELECT 
  last_name,
  commission_pct 
 FROM
  employees 
 WHERE commission_pct IS NULL ;
</code></pre>
<h5 id="安全等于">安全等于&lt;=&gt;</h5>
<pre><code class="language-sql"> SELECT 
  last_name,
  commission_pct 
 FROM
  employees 
 WHERE commission_pct &lt;=&gt; NULL ;


 SELECT 
  last_name,
  salary 
 FROM
  employees 
 WHERE salary &lt;=&gt; 12000 ;
</code></pre>
<h6 id="summary"><strong>summary</strong></h6>
<p>is null: 仅仅可以判断null值<br>
&lt;=&gt;  : 既可以判断null值，也可以判断普通的值</p>
<h5 id="addition">Addition</h5>
<p><strong>Question：</strong><code>select * from employees;</code>和<code>select * from employees where commission_pct like '%%' and last_name like '%%';</code>结果是否一样？</p>
<p>**Answer：**不一样，第二个sql语句commission_pct为null的时候没法检索出来，假如没有字段为null，就是一样的。</p>
<h2 id="mysql-排序查询">MySQL-排序查询</h2>
<h4 id="order-by-语法">ORDER BY 语法</h4>
<pre><code class="language-sql"> select 查询列表
 from 表
 [where 条件]
 [order by 排序列表 [asc|desc]
  
  # asc : 升序
  # desc : 降序
</code></pre>
<p><code>order by</code> 支持<strong>单个字段，多个字段，表达式，函数</strong><br>
<strong>一般放在查询语句最后面，除了limit子句</strong></p>
<h4 id="使用样例">使用样例</h4>
<pre><code class="language-sql"> # 1
 SELECT 
  * 
 FROM
  employees 
 ORDER BY salary ;

 # 2
 SELECT 
  * 
 FROM
  employees 
 WHERE department_id &gt;= 90 
 ORDER BY hiredate ;

 # 3 按表达式排序(支持别名)
 SELECT 
  *,
  salary * 12 * (1+ IFNULL(commission_pct, 0)) AS 年薪 
 FROM
  employees 
 ORDER BY 年薪 DESC ;

 # 4 按姓名的长度排序
 SELECT 
  last_name,
  salary 
 FROM
  employees 
 ORDER BY LENGTH(last_name) ;

 # 5先按工资排序再按员工编号排序(按多个字段排序)
 SELECT *
 FROM employees
 ORDER BY salary,employee_id DESC;

 #test problems
 # 1
 SELECT 
  last_name,
  department_id,
  salary * 12 * (1+ IFNULL(commission_pct, 0)) AS 年薪 
 FROM
  employees 
 ORDER BY 年薪 DESC,# 年薪不能加''
  last_name ;

 # 2
 SELECT 
  * 
 FROM
  employees 
 WHERE salary &lt; 8000 || salary &gt; 17000 
 ORDER BY salary DESC ;

 # 3
 SELECT 
  * 
 FROM
  employees 
 WHERE email LIKE '%e%' 
 ORDER BY LENGTH(email) DESC,
  department_id ;
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[MySQL-基础]]></title>
        <id>https://quenkar.github.io/post/mysql-ji-chu/</id>
        <link href="https://quenkar.github.io/post/mysql-ji-chu/">
        </link>
        <updated>2020-10-03T14:02:25.000Z</updated>
        <content type="html"><![CDATA[<h2 id="基础关键字">基础关键字</h2>
<p><strong>SELECT</strong> <strong>FROM</strong></p>
<h4 id="查询一个字段"># 查询一个字段</h4>
<pre><code class="language-sql"> SELECT 
  last_name 
 FROM
  employees ;
</code></pre>
<h4 id="查询多个字段"># 查询多个字段</h4>
<pre><code class="language-sql"> SELECT 
  last_name,
  salary,
  email 
 FROM
  employees ;
</code></pre>
<h4 id="查询所有字段"># 查询所有字段</h4>
<pre><code class="language-sql"> SELECT 
   * 
 FROM
  employees ;
</code></pre>
<h4 id="查询常量值"># 查询常量值</h4>
<p><code>SELECT 100;</code></p>
<p><code>SELECT 'john';</code></p>
<h4 id="查询表达式"># 查询表达式</h4>
<p><code>SELECT 100*4398;</code></p>
<h4 id="查询函数"># 查询函数</h4>
<p><code>SELECT VERSION() ;</code></p>
<h4 id="起别名"># 起别名</h4>
<p><code>SELECT 100%98 AS result;</code></p>
<p><code>SELECT last_name 姓,first_name 名 FROM employees;</code></p>
<p><code>SELECT salary AS &quot;out put&quot; FROM employees;</code></p>
<h4 id="去重"># 去重</h4>
<p><code>SELECT DISTINCT department_id FROM employees;</code></p>
<h4 id="mysql中的号">#  mysql中的+号</h4>
<p><strong>只有运算符的作用，不会像java或者c++一样可以直接拼接字符串</strong></p>
<pre><code class="language-sql"> select 100+50;
 select '123'+79;# 试图将字符串转为数字型，转换成功继续做加法
 select 'john'+40;# 假如转换失败，则字符型转换成0
 select null+10;# 只要有一方为null，结果就是null
</code></pre>
<p><code>SELECT last_name + first_name AS 姓名 FROM employees ;</code></p>
<p><strong>只会显示0</strong></p>
<h4 id="显示表的字段"># 显示表的字段</h4>
<p><code>DESC departments;</code></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Nginx安装]]></title>
        <id>https://quenkar.github.io/post/nginx-pei-zhi/</id>
        <link href="https://quenkar.github.io/post/nginx-pei-zhi/">
        </link>
        <updated>2020-10-01T13:48:42.000Z</updated>
        <content type="html"><![CDATA[<p><strong>环境：Ubuntu 18.04</strong></p>
<p><strong>权限：root</strong></p>
<h3 id="1安装pcre-837targz">1.安装pcre-8.37.tar.gz</h3>
<p><a href="https://ftp.pcre.org/pub/pcre/">https://ftp.pcre.org/pub/pcre/</a></p>
<p>解压 <code>tar -xvf pcre-8.37.tar.gz</code></p>
<p>进入pcre-8.37执行</p>
<p><code>./configure</code></p>
<p>然后再执行</p>
<p><code>make &amp;&amp; make install</code></p>
<p><strong>至少要在sudo权限下执行，否则就会Permission denied</strong><br>
<img src="https://quenkar.github.io/post-images/1601560193664.png" alt="" loading="lazy"></p>
<p>执行<code>pcre-config --version</code>查看版本</p>
<pre><code class="language-bash">$ pcre-config --version
8.39
</code></pre>
<h3 id="2安装nginx">2.安装Nginx</h3>
<p>前置条件安装</p>
<pre><code class="language-bash">sudo apt-get install zlib1g

sudo apt-get install zlib1g.dev

sudo apt-get install openssl

sudo apt-get install libssl-dev
</code></pre>
<p>官网下载nginx</p>
<p>http://nginx.org/en/download.html</p>
<p>以nginx-1.12.2版本演示<a href="http://nginx.org/download/nginx-1.12.2.tar.gz"> nginx-1.12.2</a></p>
<p>解压<code>tar -xvf nginx-1.12.2.tar.gz</code></p>
<p>进入解压后的目录，执行<code>./configure</code></p>
<p>权限要为<strong>root</strong>，用sudo执行照样权限不够</p>
<figure data-type="image" tabindex="1"><img src="https://quenkar.github.io/post-images/1601560218025.png" alt="" loading="lazy"></figure>
<p><strong>root权限</strong>下再执行<code>make &amp;&amp; make install</code></p>
<p>进入 <code>/usr/local/nginx/sbin</code> 执行<code>sudo ./nginx</code>启动nginx</p>
<p>到这里就算安装完成了</p>
<p>再配置一下系统防火墙，设置一下对外的端口号就可以访问了😋</p>
<figure data-type="image" tabindex="2"><img src="https://quenkar.github.io/post-images/1601560229643.png" alt="" loading="lazy"></figure>
]]></content>
    </entry>
</feed>